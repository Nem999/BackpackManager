{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"API","text":""},{"location":"api/#events","title":"Events","text":"<p>Warning</p> <p>When using events that interact with tool slots such as <code>.OnSlotRefresh</code> or <code>.ToolAdded</code> be sure to connect your function before calling <code>.StartBackpack()</code> or this event will not fire for tools that were already in your backpack when BackpackManager started.</p>"},{"location":"api/#tooladded","title":".ToolAdded","text":"<p>Fires when a tool is added.</p> <pre><code>BackpackManager.ToolAdded:Connect(function(Tool, ToolSlotFrame)\n    print(Tool.Name..\" was added living in\", ToolSlot)\nend)\n</code></pre>"},{"location":"api/#toolremoving","title":".ToolRemoving","text":"<p>Fires right before a tool gets removed.</p> <pre><code>BackpackManager.ToolRemoving:Connect(function(Tool, ToolSlotFrame, GhostSlot)\n    print(Tool.Name..\" is removing living in\", ToolSlot)\nend)\n</code></pre>"},{"location":"api/#onslotrefresh","title":".OnSlotRefresh","text":"<p>Fires when a tool slot is refreshed.</p> <p>Unlike ToolRemoving this event can fire whenever a tool has been swapped or moved.</p> <pre><code>BackpackManager.OnSlotRefresh:Connect(function(Tool, ToolSlotFrame)\n    local TextLabel = Instance.new(\"TextLabel\")\n\n    TextLabel.BackgroundTransparency = 1\n    TextLabel.Size = UDim2.fromOffset(30, 30)\n    TextLabel.TextScaled = true\n    TextLabel.Text = \"Hi\"\n    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)\n    TextLabel.Name = \"MyTextLabel\"\n\n    TextLabel.Parent = ToolSlot\nend)\n</code></pre>"},{"location":"api/#onslotremoving","title":".OnSlotRemoving","text":"<p>Fires when a tool slot is being removed.</p> <pre><code>BackpackManager.OnSlotRefresh:Connect(function(Tool, ToolSlotFrame)\n    local TextLabel = ToolSlot:FindFirstChild(\"MyTextLabel\")\n\n    if TextLabel then TextLabel:Destroy() end\nend)\n</code></pre>"},{"location":"api/#dragstarted","title":".DragStarted","text":"<p>Fires when a tool slot is starts being dragged.</p> <p>Notice</p> <p>Tool and GhostSlot can be nil if the tool is being dragged on controller.</p> <pre><code>BackpackManager.DragStarted:Connect(function(Tool, ToolSlotFrame, GhostSlot, isControllerDragging)\n    if not isControllerDragging then\n        print(Tool.Name..\" is being dragged in toolslot\", ToolSlot, GhostSlot)\n    else\n        print(\"The tool is being dragged on a controller or UI navigation mode.\")\n    end\nend)\n</code></pre>"},{"location":"api/#dragended","title":".DragEnded","text":"<p>Fires when a tool slot stops being dragged.</p> <pre><code>BackpackManager.DragEnded:Connect(function(Tool, ToolSlot, GhostSlot, isControllerDragging, Position)\n    if not isControllerDragging then\n        print(Tool.Name..\" is being no longer being dragged in toolslot\", ToolSlot, GhostSlot)\n\n        print(\"The drag stopped at position\", Position)\n    else\n        print(\"The tool was being dragged on a controller or UI navigation mode.\")\n    end\nend)\n</code></pre>"},{"location":"api/#hoverstarted","title":".HoverStarted","text":"<p>Fires when a tool slot is being hovered over.</p> <pre><code>BackpackManager.HoverStarted:Connect(function(ToolSlot)\n    local Tool = BackpackManager:GetToolFromSlot(ToolSlot)\n\n    print(Tool, \"is being hovered over.\")\nend)\n</code></pre>"},{"location":"api/#hoverended","title":".HoverEnded","text":"<p>Fires when a tool slot stops being hovered over.</p> <pre><code>BackpackManager.HoverEnded:Connect(function(ToolSlot)\n    local Tool = BackpackManager:GetToolFromSlot(ToolSlot)\n\n    print(Tool, \"is no longer being hovered over.\")\nend)\n</code></pre>"},{"location":"api/#inventoryopened","title":".InventoryOpened","text":"<p>Fires when the inventory is opened.</p> <pre><code>BackpackManager.InventoryOpened:Connect(function()\n    print(\"The inventory was opened.\")\nend)\n</code></pre>"},{"location":"api/#inventoryclosed","title":".InventoryClosed","text":"<p>Fires when the inventory is closed.</p> <pre><code>BackpackManager.InventoryClosed:Connect(function()\n    print(\"The inventory was closed.\")\nend)\n</code></pre>"},{"location":"api/#cooldownended","title":".CooldownEnded","text":"<p>Fires when a tool's cooldown ends.</p> <pre><code>BackpackManager.CooldownEnded:Connect(function(Tool, ToolSlot)\n    print(Tool.Name..\"'s cooldown has ended\")\nend)\n</code></pre>"},{"location":"api/#toolequipped","title":".ToolEquipped","text":"<p>Fires when a tool gets equipped.</p> <pre><code>BackpackManager.ToolEquipped:Connect(function(Tool, ToolSlotFrame, Highlight)\n    print(Tool.Name..\" was equipped and is using highlight:\", Highlight)\nend)\n</code></pre>"},{"location":"api/#toolunequipped","title":".ToolUnequipped","text":"<p>Fires when a tool gets equipped.</p> <pre><code>BackpackManager.ToolUnequipped:Connect(function(Tool, ToolSlotFrame)\n    print(Tool.Name..\" was unequipped\")\nend)\n</code></pre>"},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#startbackpack","title":".StartBackpack()","text":"<pre><code>BackpackManager.StartBackpack()\n</code></pre> <p>Starts the backpack, builds the gui, disables Roblox's default backpack, and only runs once.</p> <p>Failure</p> <p>Call this function in a script that will not be deleted. NEVER call this in a CharacterScript.</p> <p>Failure</p> <p>Calling any of the functions below except <code>:IsRunning()</code> without calling this function first will result in an error.</p> <p>Example usage:</p> <pre><code>local BackpackManager = require(BackpackManager)\n\nBackpackManager.StartBackpack()\n\n-- Starts the backpack.\n</code></pre>"},{"location":"api/#mapkeybind","title":":MapKeybind()","text":"<pre><code>BackpackManager:MapKeybind(SlotNumber: number , Keycode: Enum.Keycode)\n</code></pre> <p>Maps a slot's equip function to a certain keycode.</p> <p>Failure</p> <p>This only works for hotbar slots and not inventory slots.</p> <p>Example usage:</p> <pre><code>BackpackManager:MapKeybind(2 , Enum.Keycode.P) -- Maps the 2nd tool slots equip to P\n</code></pre>"},{"location":"api/#unmapkeybind","title":":UnmapKeybind()","text":"<pre><code>BackpackManager:UnmapKeybind(SlotNumber: number)\n</code></pre> <p>Unmap a slot's equip function.</p> <p>Example usage:</p> <pre><code>BackpackManager:UnmapKeybind(2) -- Unmaps the 2nd tool slots equip function\n</code></pre>"},{"location":"api/#equip","title":":Equip()","text":"<pre><code>BackpackManager:Equip(ToolOrSlot: (number | string | ToolSlot | Tool), Generic: boolean, RespectsCooldown: boolean)\n\n-- ToolOrSlot: The Tool being equipped\n-- Generic: Whether BackpackManager should traverse all of the tools or only the tools in the hotbar.\n-- RespectsCooldown: If BackpackManager should take the cooldown into account when equipping the tool.\n</code></pre> <p>Equips a tool if it's not currently equipped and unequips it if it is.</p> <p>Example usage:</p> <pre><code>BackpackManager:Equip(2 , true, false) \n-- Equips the 2nd tool only searching in the hotbar slots and ignoring any equip cooldown.\n</code></pre>"},{"location":"api/#isinventoryopen","title":":IsInventoryOpen()","text":"<pre><code>BackpackManager:IsInventoryOpen():boolean\n</code></pre> <p>Returns true if the inventory is currently open and false if it's not.</p> <p>Example usage:</p> <pre><code>if BackpackManager:IsInventoryOpen() then\n    print(\"The inventory is open.\")\nend\n</code></pre>"},{"location":"api/#isenabled","title":":IsEnabled()","text":"<pre><code>BackpackManager:IsEnabled():boolean\n</code></pre> <p>Returns true if the backpack is currently enabled and false if it's not currently enabled.</p> <p>Example usage:</p> <pre><code>if BackpackManager:IsEnabled() then\n    print(\"BackpackManager is currently enabled.\")\nend\n</code></pre>"},{"location":"api/#isinventoryenabled","title":":IsInventoryEnabled()","text":"<pre><code>BackpackManager:IsInventoryEnabled():boolean\n</code></pre> <p>Returns true if the inventory is currently enabled and false if it's not currently enabled.</p> <p>Example usage:</p> <pre><code>if BackpackManager:IsInventoryEnabled() then\n    print(\"The inventory is currently enabled.\")\nend\n</code></pre>"},{"location":"api/#openinventory","title":":OpenInventory()","text":"<pre><code>BackpackManager:OpenInventory(RespectsCooldown: boolean)\n-- RespectsCooldown: If BackpackManager should take the cooldown into account when opening the inventory.\n</code></pre> <p>Opens the inventory.</p> <p>Example usage:</p> <pre><code>BackpackManager:OpenInventory(false)\n-- Open the inventory and ignore any cooldown\n</code></pre>"},{"location":"api/#closeinventory","title":":CloseInventory()","text":"<pre><code>BackpackManager:CloseInventory(RespectsCooldown: boolean)\n-- RespectsCooldown: If BackpackManager should take the cooldown into account when closing the inventory.\n</code></pre> <p>Closes the inventory.</p> <p>Example usage:</p> <pre><code>BackpackManager:CloseInventory(false)\n-- Close the inventory and ignore any cooldown\n</code></pre>"},{"location":"api/#movetooltohotbarslotnumber","title":":MoveToolToHotbarSlotNumber()","text":"<pre><code>BackpackManager:MoveToolToHotbarSlotNumber(ToolOrSlot: (number | string | ToolSlot | Tool), SlotNumber: number):table\n\n-- ToolOrSlot: The Tool being moved\n-- SlotNumber: The number the tool is being moved into.\n</code></pre> <p>Moves a tool to a certain hotbar slot number.</p> <p>Warning</p> <p>Trying to move a tool into a slot that is occupied will result in a warning. Consider using <code>:SwapTools()</code> in that case.</p> <p>Example usage:</p> <pre><code>BackpackManager:MoveToolToHotbarSlotNumber(Tool, 3)\n-- Moves a tool into slot 3\n</code></pre>"},{"location":"api/#movetooltoinventory","title":":MoveToolToInventory()","text":"<pre><code>BackpackManager:MoveToolToInventory(ToolOrSlot: (number | string | ToolSlot | Tool)):table\n\n-- ToolOrSlot: The tool being moved\n</code></pre> <p>Moves a tool to the inventory.</p> <p>Example usage:</p> <pre><code>BackpackManager:MoveToolToInventory(2)\n-- Moves whatever tool is in slot 2 to the inventory.\n</code></pre>"},{"location":"api/#movetooltohotbar","title":":MoveToolToHotbar()","text":"<pre><code>BackpackManager:MoveToolToHotbar(ToolOrSlot: (number | string | ToolSlot | Tool)):table\n\n-- ToolOrSlot: The tool being moved\n</code></pre> <p>Moves a tool to a free hotbar slot if one exist.</p> <p>Warning</p> <p>Trying to use this function while the hotbar is full will result in a warning. Use <code>:GetMaxHotbarTools()</code> and <code>:GetHotbarTools()</code> to check if the hotbar is full beforehand.</p> <p>Example usage:</p> <pre><code>BackpackManager:MoveToolToHotbar(13)\n-- Moves whatever tool is in slot 13 to the hotbar.\n</code></pre>"},{"location":"api/#swaptools","title":":SwapTools()","text":"<pre><code>BackpackManager:SwapTools(ToolOrSlot1: (number | string | ToolSlot | Tool), ToolOrSlot2: (number | string | ToolSlot | Tool)):(table | table)\n\n-- ToolOrSlot: The tool being moved\n</code></pre> <p>Swaps two tools.</p> <p>Example usage:</p> <pre><code>BackpackManager:SwapTools(Tool1, Tool2)\n-- Swaps Tool1 and Tool2 with each other.\n</code></pre>"},{"location":"api/#sorttools","title":":SortTools()","text":"<pre><code>BackpackManager:SortTools()\n</code></pre> <p>Sorts the tools in the hotbar filling any missing gap.</p> <p>Notice</p> <p>If a tool has been moved using <code>:MoveToolToHotbarSlotNumber()</code> then this function will ignore sorting that tool.</p> <p>Example usage:</p> <pre><code>if BackpackManager:GetToolFromNumber(1) and not BackpackManager:GetToolFromNumber(2) and BackpackManager:GetToolFromNumber(3) then\n    BackpackManager:SortTools()\nend\n</code></pre>"},{"location":"api/#popnotificationicon","title":":PopNotificationIcon()","text":"<pre><code>BackpackManager:PopNotificationIcon(State: boolean)\n\n-- State: the visibility state of the notification icon.\n</code></pre> <p>Shows the notification icon on the backpack icon.</p> <p>Example usage:</p> <pre><code>BackpackManager:PopNotificationIcon(true)\n-- Displays the notification icon\n\ntask.wait(2)\n\nBackpackManager:PopNotificationIcon(false)\n-- Removes the notification icon\n</code></pre>"},{"location":"api/#unequiptools","title":":UnequipTools()","text":"<pre><code>BackpackManager:UnequipTools()\n</code></pre> <p>Unequips non glued tools.</p> <p>Example usage:</p> <pre><code>task.wait(1)\n\nBackpackManager:UnequipTools()\n\n-- Unequips any tool that isn't glued.\n</code></pre>"},{"location":"api/#getequippedtools","title":":GetEquippedTools()","text":"<pre><code>BackpackManager:GetEquippedTools():table\n</code></pre> <p>Returns a table of all tools that are currently equipped.</p> <p>Example usage:</p> <pre><code>print(BackpackManager:GetEquippedTools())\n-- Prints a table of all the tools that are equipped.\n</code></pre>"},{"location":"api/#gettools","title":":GetTools()","text":"<pre><code>BackpackManager:GetTools():table\n</code></pre> <p>Returns a table of all tools that are currently in the backpack and on the current character.</p> <p>Example usage:</p> <pre><code>print(BackpackManager:GetTools())\n-- Prints a table of all the tools.\n</code></pre>"},{"location":"api/#gettoolfromframe","title":":GetToolFromFrame()","text":"<pre><code>BackpackManager:GetToolFromFrame(Frame: Frame):Tool\n\n-- Frame: The ToolSlot's Frame\n</code></pre> <p>Returns the tool that corresponds to the given backpack slot.</p> <p>Example usage:</p> <pre><code>local Tool = BackpackManager:GetToolFromFrame(Frame)\n\nprint(Tool)\n-- Prints a tool\n</code></pre>"},{"location":"api/#gettoolfromslot","title":":GetToolFromSlot()","text":"<pre><code>BackpackManager:GetToolFromSlot(ToolOrSlot: (number | string | ToolSlot | Tool)):Tool\n\n-- ToolOrSlot: The tool being moved\n</code></pre> <p>Returns the tool that corresponds to the given tool slot.</p> <p>Example usage:</p> <pre><code>local Tool = BackpackManager:GetToolFromSlot(ToolSlot)\n\nprint(Tool)\n-- Prints a tool\n</code></pre>"},{"location":"api/#gettoolfromnumber","title":":GetToolFromNumber()","text":"<pre><code>BackpackManager:GetToolFromNumber(Number: number):Tool\n\n-- Number: The tool slot's number\n</code></pre> <p>Returns the tool that corresponds to the given slot number.</p> <p>Example usage:</p> <pre><code>local Tool = BackpackManager:GetToolFromNumber(3)\n\nprint(Tool)\n-- Prints the tool that lives in slot 3 if any\n</code></pre>"},{"location":"api/#getmaxhotbartools","title":":GetMaxHotbarTools()","text":"<pre><code>BackpackManager:GetMaxHotbarTools():number\n</code></pre> <p>Returns the max amount of slots that can fit in the hotbar at the moment.</p> <p>Example usage:</p> <pre><code>local MaxToolSlots = BackpackManager:GetMaxHotbarTools()\nlocal HotbarTools = BackpackManager:GetHotbarTools()\n\nif MaxToolSlots ~= #HotbarTools then\n    BackpackManager:MoveToolToHotbar(11)\nend\n\n-- Checks if the max hotbar slots have been reached before moving a tool into the hotbar\n</code></pre>"},{"location":"api/#getslotfromtool","title":":GetSlotFromTool()","text":"<pre><code>BackpackManager:GetSlotFromTool(ToolOrSlot: (number | string | ToolSlot | Tool)):table\n\n-- ToolOrSlot: The tool being used to get the slot from.\n</code></pre> <p>Returns the slot data for a certain tool.</p> <p>Example usage:</p> <pre><code>local SlotData = BackpackManager:GetSlotFromTool(2)\n\nif SlotData then\n    print(SlotData)\nend\n\n-- Prints the slot data in slot 2\n</code></pre>"},{"location":"api/#getslotfromframe","title":":GetSlotFromFrame()","text":"<pre><code>BackpackManager:GetSlotFromFrame(Frame: Frame):table\n\n-- Frame: The tool slot's frame instance\n</code></pre> <p>Returns the slot data for a certain frame.</p> <p>Example usage:</p> <pre><code>local SlotData = BackpackManager:GetSlotFromFrame(Frame)\n\nif SlotData then\n    print(SlotData)\nend\n\n-- Prints the slot data that coressponds to said frame.\n</code></pre>"},{"location":"api/#getslotfromnumber","title":":GetSlotFromNumber()","text":"<pre><code>BackpackManager:GetSlotFromNumber(Number: number):table\n\n-- Number: The tool slot's number\n</code></pre> <p>Returns the slot data for a certain tool slots number.</p> <p>Example usage:</p> <pre><code>local SlotData = BackpackManager:GetSlotFromNumber(13)\n\nif SlotData then\n    print(SlotData)\nend\n\n-- Prints the slot data that coressponds to slot 13\n</code></pre>"},{"location":"api/#gethotbartools","title":":GetHotbarTools()","text":"<pre><code>BackpackManager:GetHotbarTools():table\n</code></pre> <p>Returns a table of all tools that are currently in the hotbar.</p> <p>Example usage:</p> <pre><code>local HotbarTools = BackpackManager:GetHotbarTools()\n\nfor _, Tool in pairs(HotbarTools) do\n    print(Tool.Name)\nend\n\n-- Prints each name for each tool that is in the hotbar.\n</code></pre>"},{"location":"api/#getinventorytools","title":":GetInventoryTools()","text":"<pre><code>BackpackManager:GetInventoryTools():table\n</code></pre> <p>Returns a table of all tools that are currently in the inventory.</p> <p>Example usage:</p> <pre><code>local InventoryTools = BackpackManager:GetInventoryTools()\n\nfor _, Tool in pairs(InventoryTools) do\n    print(Tool.Name)\nend\n\n-- Prints each name for each tool that is in the inventory.\n</code></pre>"},{"location":"api/#gethighlights","title":":GetHighlights()","text":"<pre><code>BackpackManager:GetHighlights():table\n</code></pre> <p>Returns a table of all highlights.</p> <p>Example usage:</p> <pre><code>local Highlights = BackpackManager:GetHighlights()\n\nfor _, Highlight in pairs(Highlights) do\n    print(Highlight)\nend\n\n-- Prints each highlight\n</code></pre>"},{"location":"api/#setviewportenabled","title":":SetViewportEnabled()","text":"<pre><code>BackpackManager:SetViewportEnabled(ToolOrSlot: (number | string | ToolSlot | Tool), boolean: boolean)\n\n-- ToolOrSlot: The tool being used.\n-- boolean: The state the viewport is being set to\n</code></pre> <p>Enables or disables the viewport frame displaying the physical tool.</p> <p>Example usage:</p> <pre><code>BackpackManager.ToolAdded:Connect(function(Tool)\n    if Tool.Name == \"Sword\" then\n        BackpackManager:SetViewportEnabled(Tool)\n    end\nend)\n\n-- Enables viewport mode if a tool with the name of \"Sword\" gets added\n</code></pre>"},{"location":"api/#setviewportoffset","title":":SetViewportOffset()","text":"<pre><code>BackpackManager:SetViewportOffset(ToolOrSlot: (number | string | ToolSlot | Tool), OffsetCFrame: CFrame)\n\n-- ToolOrSlot: The tool being used.\n-- OffsetCFrame: The offset CFrame the viewport's camera uses.\n</code></pre> <p>Sets the camera offset for the viewport frame displaying the physical tool.</p> <p>Example usage:</p> <pre><code>BackpackManager.ToolAdded:Connect(function(Tool)\n    if Tool.Name == \"Sword\" then\n        BackpackManager:SetViewportOffset(Tool, CFrame.new(0, 0, 0) * CFrame.Angles(0 , 0, math.rad(60))\n    end\nend)\n\n-- Sets the viewport offset if a tool with the name of \"Sword\" gets added\n</code></pre>"},{"location":"api/#gluetool","title":":GlueTool()","text":"<pre><code>BackpackManager:GlueTool(ToolOrSlot: (number | string | ToolSlot | Tool))\n\n-- ToolOrSlot: The tool being glued.\n</code></pre> <p>Forces a tool to be equipped at all times and prevents said tool from being moved (This will not use a hotbar slot).</p> <p>Example usage:</p> <pre><code>BackpackManager.ToolAdded:Connect(function(Tool)\n    if Tool.Name == \"Sword\" then\n        BackpackManager:GlueTool(Tool)\n    end\nend)\n\n-- Glues the tool if a tool with the name of \"Sword\" gets added\n</code></pre>"},{"location":"api/#removeglue","title":":RemoveGlue()","text":"<pre><code>BackpackManager:RemoveGlue(ToolOrSlot: (number | string | ToolSlot | Tool))\n\n-- ToolOrSlot: The glued tool to remove from.\n</code></pre> <p>Removes a glued tool, returning it back to normal.</p> <p>Example usage:</p> <pre><code>local Tool\n\nif BackpackManager:IsToolGlued(Tool) then\n    BackpackManager:RemoveGlue(Tool)\nend\n\n-- Unglues a tool if the tool is glued.\n</code></pre>"},{"location":"api/#istoolglued","title":":IsToolGlued()","text":"<pre><code>BackpackManager:IsToolGlued(Tool: Tool):boolean\n\n-- ToolOrSlot: The tool being used.\n</code></pre> <p>Returns the true if the tool is glued and false if it is not glued.</p> <p>Example usage:</p> <pre><code>local Tool\n\nif BackpackManager:IsToolGlued(Tool) then\n    print(\"This tool is glued\")\nend\n\n-- Checks if a tool is glued.\n</code></pre>"},{"location":"api/#disableinventory","title":":DisableInventory()","text":"<pre><code>BackpackManager:DisableInventory()\n</code></pre> <p>Disables the inventory, prevents it from being used, and closes it if it's currently open.</p> <p>Example usage:</p> <pre><code>if BackpackManager:IsInventoryEnabled() then\n    BackpackManager:DisableInventory()\nend\n\n-- Disables the inventory if it is enabled.\n</code></pre>"},{"location":"api/#enableinventory","title":":EnableInventory()","text":"<pre><code>BackpackManager:EnableInventory()\n</code></pre> <p>Enables the inventory.</p> <p>Example usage:</p> <pre><code>if not BackpackManager:IsInventoryEnabled() then\n    BackpackManager:EnableInventory()\nend\n\n-- Enables the inventory if it is disabled.\n</code></pre>"},{"location":"api/#locktool","title":":LockTool()","text":"<pre><code>BackpackManager:LockTool(ToolOrSlot: (number | string | ToolSlot | Tool))\n\n-- ToolOrSlot: The tool being locked.\n</code></pre> <p>Prevents a tool from being equipped and displays a lock icon on the slot.</p> <p>Example usage:</p> <pre><code>BackpackManager.ToolAdded:Connect(function(Tool)\n    if Tool.Name == \"Sword\" then\n        BackpackManager:LockTool(Tool)\n    end\nend)\n\n-- Locks the tool if a tool with the name of \"Sword\" gets added\n</code></pre>"},{"location":"api/#unlocktool","title":":UnlockTool()","text":"<pre><code>BackpackManager:UnlockTool(ToolOrSlot: (number | string | ToolSlot | Tool))\n\n-- ToolOrSlot: The tool being unlocked.\n</code></pre> <p>Unlocks a tool letting it be equipped again.</p> <p>Example usage:</p> <pre><code>local Tool\n\nif BackpackManager:IsToolLocked(Tool) then\n    BackpackManager:UnlockTool(Tool)\nend\n\n-- Unlocks a tool if the tool is locked.\n</code></pre>"},{"location":"api/#istoollocked","title":":IsToolLocked()","text":"<pre><code>BackpackManager:IsToolLocked(Tool: Tool):boolean\n\n-- Tool: The tool to be checked.\n</code></pre> <p>Returns the true if the tool is locked and false if it is not locked.</p> <p>Example usage:</p> <pre><code>local Tool\n\nif BackpackManager:IsToolLocked(Tool) then\n    print(\"This tool is locked\")\nend\n\n-- Checks if a tool is locked.\n</code></pre>"},{"location":"api/#disable","title":":Disable()","text":"<pre><code>BackpackManager:Disable()\n</code></pre> <p>Stops rendering the backpack and prevents it from responding to user input.</p> <p>Example usage:</p> <pre><code>if not game:IsLoaded() then BackpackManager:Disable() end\n\n-- Disables BackpackManager if the game is not loaded.\n</code></pre>"},{"location":"api/#enable","title":":Enable()","text":"<pre><code>BackpackManager:Enable()\n</code></pre> <p>Starts rendering the backpack, and makes the backpack respond to user input again.</p> <p>Example usage:</p> <pre><code>if not game:IsLoaded() then BackpackManager:Disable() game.Loaded:Wait() end\n\nBackpackManager:Enable()\n\n-- Disables BackpackManager if the game is not loaded then enables it once the game has been loaded.\n</code></pre>"},{"location":"api/#getbackpack","title":":GetBackpack()","text":"<pre><code>BackpackManager:GetBackpack():Backpack\n</code></pre> <p>Returns the current backpack instance being used by the BackpackManager.</p> <p>Example usage:</p> <pre><code>local Backpack = BackpackManager:GetBackpack()\n\nprint(Backpack)\n\n-- Prints the backpack being used.\n</code></pre>"},{"location":"api/#setcooldown","title":":SetCooldown()","text":"<pre><code>BackpackManager:SetCooldown(ToolOrSlot: (number | string | ToolSlot | Tool))\n\n-- ToolOrSlot: The tool being used.\n</code></pre> <p>Puts the tool on cooldown which displays on the tool slot.</p> <p>Example usage:</p> <pre><code>local Tool\n\nTool.Activated:Connect(function()\n  if BackpackManager:IsOnCooldown(Tool) then return end\n\n  BackpackManager:SetCooldown(Tool, 2)\n\n  -- Your code \nend)\n\n-- Checks if there is a cooldown on the tool before calling any other code and sets the cooldown to 2 seconds.\n</code></pre>"},{"location":"api/#isoncooldown","title":":IsOnCooldown()","text":"<pre><code>BackpackManager:IsOnCooldown(ToolOrSlot: (number | string | ToolSlot | Tool)):boolean\n\n-- ToolOrSlot: The tool being checked.\n</code></pre> <p>Returns true if the tool has a cooldown active and false if the tool does not have a cooldown active.</p> <p>Example usage:</p> <pre><code>local Tool\n\nTool.Activated:Connect(function()\n  if BackpackManager:IsOnCooldown(Tool) then return end\n\n  -- Your code \nend)\n\n-- Checks if there is a cooldown on the tool before calling any other code.\n</code></pre>"},{"location":"api/#getslotnumber","title":":GetSlotNumber()","text":"<pre><code>BackpackManager:GetSlotNumber(ToolOrSlot: (number | string | ToolSlot | Tool)):number\n\n-- ToolOrSlot: The tool being used.\n</code></pre> <p>Returns the slot number that corresponds to a tool or slot.</p> <p>Example usage:</p> <pre><code>local Tool\nlocal SlotNumber = BackpackManager:GetSlotNumber(Tool)\n\nprint(SlotNumber)\n\n-- Prints the slot number of the target tool\n</code></pre>"},{"location":"api/#getframefromtool","title":":GetFrameFromTool()","text":"<pre><code>BackpackManager:GetFrameFromTool(ToolOrSlot: (number | string | ToolSlot | Tool)):Frame\n\n-- ToolOrSlot: The tool being used.\n</code></pre> <p>Returns the backpack slot from the tool given.</p> <p>Example usage:</p> <pre><code>local Tool\nlocal Frame = BackpackManager:GetFrameFromTool(Tool)\n\nprint(Frame)\n\n-- Prints the frame of the target tool\n</code></pre>"},{"location":"api/#getframefromhotbarnumber","title":":GetFrameFromHotbarNumber()","text":"<pre><code>BackpackManager:GetFrameFromHotbarNumber(Number: number):Frame\n\n-- Number: The hotbar slot number to get the frame from\n</code></pre> <p>Returns the backpack slot from the tool given.</p> <p>Example usage:</p> <pre><code>local Frame = BackpackManager:GetFrameFromHotbarNumber(3)\n\nprint(Frame)\n\n-- Prints the frame of the target hotbar number\n</code></pre>"},{"location":"api/#isrunning","title":":IsRunning()","text":"<pre><code>BackpackManager:IsRunning():boolean\n</code></pre> <p>Returns true if the backpack is running and false if it's not.</p> <p>Example usage:</p> <pre><code>if not BackpackManager:IsRunning() then repeat task.wait() until BackpackManager:IsRunning()\n\n-- Yield your code until BackpackManager is running. Useful if you have multiple different scripts interacting with BackpackManager.\n</code></pre>"},{"location":"api/#setslotequipable","title":":SetSlotEquipable()","text":"<pre><code>BackpackManager:SetSlotEquipable(ToolOrSlot: (number | string | ToolSlot | Tool), boolean)\n\n-- ToolOrSlot: The tool being used.\n</code></pre> <p>Toggles if a tool slot can have its tool equipped or not.</p> <p>Example usage:</p> <pre><code>BackpackManager:SetSlotEquipable(5, false)\n\ntask.wait(2)\n\nBackpackManager:SetSlotEquipable(5, true)\n\n-- Slot 5 will not be able to have any tools equipped for 2 seconds.\n</code></pre>"},{"location":"api/#isslotequipable","title":":IsSlotEquipable()","text":"<pre><code>BackpackManager:IsSlotEquipable(ToolOrSlot: (number | string | ToolSlot | Tool)):boolean\n\n-- ToolOrSlot: The tool being checked.\n</code></pre> <p>Returns true if the tool slot is equippable. And false if its not (does not count for locking).</p> <p>Example usage:</p> <pre><code>if not BackpackManager:IsSlotEquipable(5) then\n    BackpackManager:SetSlotEquipable(5, true)\nend\n\n-- Checks if slot 5 can have its tool equipped and if not then enable slot 5 to have its tool equipped.\n</code></pre>"},{"location":"configurations/","title":"Configurations","text":""},{"location":"configurations/#maxhotbartoolslots","title":"MaxHotbarToolSlots","text":"<p>This setting controls the maximum amount of tool slots allowed to be used reguardless of the client's screen size.</p> <p>Setting set to 5</p> <p></p>"},{"location":"configurations/#minhotbarslots","title":"MinHotbarSlots","text":"<p>This setting controls the minimum amount of tool slots allowed to be used reguardless of the client's screen size.</p> <p>Setting set to 6</p> <p></p>"},{"location":"configurations/#neededfreespace","title":"NeededFreeSpace","text":"<p>This setting determines how many pixels is \"reserved\" when calculating how many tool slots the client should have.</p> <p>Notice</p> <p>Having a higher number may result in less tool slots.</p>"},{"location":"configurations/#equipcooldown","title":"EquipCooldown","text":"<p>This setting determines how long the client has to wait in between equipping. Useful for preventing equip spam.</p>"},{"location":"configurations/#viewportspeed","title":"ViewportSpeed","text":"<p>This setting determines how fast tools move in their viewport frame.</p> <p>Setting set to 10</p> <p></p>"},{"location":"configurations/#sweepinterval","title":"SweepInterval","text":"<p>This setting determines how long it takes for reusable inventory slots to be destroyed.</p> <p>When a inventory slot is created for a tool, BackpackManager does not delete it immediately when it is not needed anymore instead BackpackManager reuses slots whenever one is needed. These reusable slots are only deleted when a sweep occurs.</p> <p></p>"},{"location":"configurations/#maxheldtools","title":"MaxHeldTools","text":"<p>This setting determines how many tools can be held at once by the player.</p> <p>Setting set to 3</p> <p></p>"},{"location":"configurations/#dragwaittime","title":"DragWaitTime","text":"<p>This setting determines how long the player needs to hold left click on a tool before it starts dragging.</p> <p>Setting set to 1</p> <p></p>"},{"location":"configurations/#tooltipspeed","title":"ToolTipSpeed","text":"<p>This setting determines how fast tool tips display.</p> <p>Setting set to 0.012</p> <p></p>"},{"location":"configurations/#autocalculatemaxtoolslots","title":"AutoCalculateMaxToolSlots","text":"<p>This setting determines if BackpackManager will dynamically set the max tool slots depending on screen size.</p> <p>Notice</p> <p>This setting will respect the preset maximum and minimum tools by the developer and will never go below the minimum or above the maximum.</p> <p>Setting set to true</p> <p></p>"},{"location":"configurations/#useviewportframe","title":"UseViewportFrame","text":"<p>This setting when enabled will automatically display tools in viewport mode.</p> <p>Setting set to true</p> <p></p>"},{"location":"configurations/#usescrollwheel","title":"UseScrollWheel","text":"<p>This setting when enabled will allow for the client to cycle through tools using their mouse's scroll wheel.</p>"},{"location":"configurations/#canorganize","title":"CanOrganize","text":"<p>This setting determines if the client is allowed to move tools.</p>"},{"location":"configurations/#animate","title":"Animate","text":"<p>This setting determines if BackpackManager will use animations.</p> <p>Setting set to false</p> <p></p>"},{"location":"configurations/#autosortslots","title":"AutoSortSlots","text":"<p>This setting determines if BackpackManager will automatically sort tool slots when a tool is removed.</p> <p>Setting set to true</p> <p></p>"},{"location":"configurations/#preventequippingontoolcooldown","title":"PreventEquippingOnToolCooldown","text":"<p>This setting determines if a tool that has a cooldown active on it will be allowed to be equipped.</p>"},{"location":"configurations/#usegamepadcursor","title":"UseGamepadCursor","text":"<p>This setting determines if the gamepad cursor is used when the inventory is opened.</p> <p>Setting set to true</p> <p></p> <p>Setting set to false</p> <p></p>"},{"location":"configurations/#showhints","title":"ShowHints","text":"<p>This setting determines if input hints are shown.</p> <p>Setting set to true</p> <p></p>"},{"location":"configurations/#showbackpackicon","title":"ShowBackpackIcon","text":"<p>This setting determines if the backpack icon will be displayed.</p> <p>Setting set to true</p> <p></p> <p>Setting set to false</p> <p></p>"},{"location":"configurations/#showinactivehotbarslots","title":"ShowInactiveHotbarSlots","text":"<p>This setting determines if unused hotbar slots are displayed.</p> <p>Setting set to true</p> <p></p> <p>Setting set to false</p> <p></p> <p>Notice</p> <p>If this setting is disabled then you will have to implement your own backpack button for mobile users to access the inventory.</p>"},{"location":"configurations/#backpackbuttonopenedcolor","title":"BackpackButtonOpenedColor","text":"<p>This setting determines the color of the backpack icon's color when the inventory has been opened.</p> <p>Setting set to RGB(203, 53, 53)</p> <p></p>"},{"location":"configurations/#desiredpadding","title":"DesiredPadding","text":"<p>This setting determines the spacing of tool slot gui elements.</p> <p>Setting set to UDIM(0, 2)</p> <p></p>"},{"location":"configurations/#inventoryyoffset","title":"InventoryYOffset","text":"<p>This setting determines the offset of the inventory in the Y axis.</p>"},{"location":"configurations/#hotbaryoffset","title":"HotbarYOffset","text":"<p>This setting determines the offset of the hotbar in the Y axis.</p>"},{"location":"configurations/#gluecontainerxoffset","title":"GlueContainerXOffset","text":"<p>This setting determines the offset of the glue container in the X axis.</p>"},{"location":"configurations/#backpackbuttonxoffset","title":"BackpackButtonXOffset","text":"<p>This setting determines the offset of the backpack button in the X axis.</p>"},{"location":"configurations/#backpackbuttonyoffset","title":"BackpackButtonYOffset","text":"<p>This setting determines the offset of the backpack button in the Y axis.</p>"},{"location":"configurations/#slotanimatestartyoffset","title":"SlotAnimateStartYOffset","text":"<p>This setting determines the start offset of the highlight in the Y axis.</p>"},{"location":"configurations/#slotanimatestartxoffset","title":"SlotAnimateStartXOffset","text":"<p>This setting determines the start offset of the highlight in the X axis.</p>"},{"location":"configurations/#tooltipyoffset","title":"ToolTipYOffset","text":"<p>This setting determines the offset of tool tips in the Y axis.</p>"},{"location":"configurations/#inventory_openandclose_keycodes","title":"INVENTORY_OPENANDCLOSE_KEYCODES","text":"<p>This setting determines which keybinds open and close the inventory.</p>"},{"location":"configurations/#fastmove_keycodes","title":"FASTMOVE_KEYCODES","text":"<p>This setting determines which keybinds while pressing left click on a tool while the inventory is opened will preform a fast move.</p>"},{"location":"configurations/#gui_selection_keycodes","title":"GUI_SELECTION_KEYCODES","text":"<p>This setting determines which keybinds will select tool slots while in UI navigation mode.</p>"},{"location":"configurations/#cycle_left_keycodes","title":"CYCLE_LEFT_KEYCODES","text":"<p>This setting determines which keybinds will cycle left through the hotbar.</p>"},{"location":"configurations/#cycle_right_keycodes","title":"CYCLE_RIGHT_KEYCODES","text":"<p>This setting determines which keybinds will cycle right through the hotbar.</p>"},{"location":"home/","title":"Home","text":"<p>BackpackManager is an open source Backpack replacement with a feature rich exposed API allowing you to create a unique backpack UI within your game.</p> <p>Key Features include:</p> <ul> <li>Multi-Platform Support \u2013 Works on PC, Mobile, Console, and VR.</li> <li>Customizable Tool Slots \u2013 Organize tools however you like.</li> <li>Slot Control \u2013 Limit and manage the number of available slots.</li> <li>Exposed API \u2013 Easily interact with and modify the backpack system.</li> <li>Event Signaling \u2013 Get notified of key backpack events.</li> <li>Tool Locking &amp; Equip Prevention \u2013 Restrict access to specific tools.</li> <li>Smooth Animations \u2013 Animations can be enabled or disabled for a more polished experience.</li> </ul>"},{"location":"home/#get-started","title":"Get Started","text":"<ol> <li>Head over this Roblox Creator Store Page and click \"Get Model\"</li> <li>Open studio into your place</li> <li>Open the toollbox and go to \"My models\"</li> <li>Drag the Module into your game (It should be a ScreenGui named \"BackpackGui\")</li> </ol>"}]}